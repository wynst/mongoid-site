---
title: Querying
author: Durran Jordan
category: docs
---
.text
  Mongoid supports querying the database for documents usings 2 styles. The first is an
  ActiveRecord-like finder/dynamic finder syntax, and the second and preferred method is through Mongoid's
  <tt>Criteria</tt> API.

  %br
  %br
.title Finders
.text
  Finders are class methods on a document that take a hash of conditions or a string to find
  an object in the database. They are <tt>Document.all</tt>, <tt>Document.count</tt>,
  <tt>Document.find</tt>, <tt>Document.first</tt>, <tt>Document.last</tt>, and <tt>Document.paginate</tt>.
  In addition to those a finder/creation syntax is also supported where the supplied attributes will
  create or instantiate and new document if the attributes don't provide a match.

  %br
  %br
  Finding all documents given some conditions:
  %pre
    %code
      :preserve
        Person.all(:conditions => { :first_name => "Syd" })
        Person.find(:all, :conditions => { :first_name => "Syd" })

  %br
  Finding all documents given some conditions with Regular Expression:
  %pre
    %code
      :preserve
        Person.all(:conditions => { :first_name => /^sy/i })
        Person.find(:all, :conditions => { :first_name => /^sy/i })

  %br
  Find the first document given some conditions:
  %pre
    %code
      :preserve
        Person.first(:conditions => { :first_name => "Syd" })
        Person.find(:first, :conditions => { :first_name => "Syd" })

  %br
  Find the last document given some conditions. If no sorting parameter is provided then the id
  field will be used to reverse the sort.
  %pre
    %code
      :preserve
        Person.last(:conditions => { :first_name => "Syd" })
        Person.find(:last, :conditions => { :first_name => "Syd" })

  %br
  Find using a dynamic finder - if the object does not exist then create/instantiate it:
  %pre
    %code
      :preserve
        Person.find_or_create_by(:first_name => "Syd")
        Person.find_or_initialize_by(:first_name => "Syd")

.title Criteria API
.text
  The preferred method of querying the database is through the criteria API, which is a DSL
  which will make those familiar with SQL very comfortable. <tt>Criteria</tt> queries are lazy loaded
  from the database, and can be chained infinitely.

  %br
  %br
  There are several different ways of creating a new criteria:
  %pre
    %code
      :preserve
        all_people = Mongoid::Criteria.new(Person)
        all_people_again = Person.criteria
        all_people_names_only = Person.only(:first_name, :last_name)
        people_over_18 = Person.where(:age.gt => 18)

  In the above example the first two will create an empty criteria for the person, where the third will
  automatically add a field selection criterion to it and the fourth will create one with a where
  selector already added. You may use any entry point method defined in <tt>Mongoid::Finders</tt>, which
  are class methods on your document class. These are listed below.

%br
.title Criteria Methods
.text
  Various types of criteria can be added by chaining - the list of available methods are:

  %br
  %br
  <tt>Criteria#all_in</tt>: Matches if all values provided match, useful for doing exact matches on arrays.
  %pre
    %code
      :preserve
        Person.all_in(:aliases => [ "Jeffrey", "The Dude" ])

  %br
  <tt>Criteria#any_in</tt>: Matches documents that have a field matching any value in the array.
  %pre
    %code
      :preserve
        Person.any_in(:status => ["Single", "Divorced", "Separated"])

  %br
  <tt>Criteria#and</tt>: Matches documents for each field/value pair. Aliased from where, it's just
  nice syntactic sugar.
  %pre
    %code
      :preserve
        Person.and(:age.gt => 18, :gender => "Male")

  %br
  <tt>Criteria#count</tt>: This must be chained behind another criterion not to interfere with
  the ActiveRecord style count.
  %pre
    %code
      :preserve
        Person.where(:status => "Married").count

  %br
  <tt>Criteria#excludes</tt>: Matches documents that don't match the key value pairs
  %pre
    %code
      :preserve
        Person.excludes(:status => "Married")

  %br
  <tt>Criteria#id</tt>: Matches a document with the supplied id.
  %pre
    %code
      :preserve
        Person.criteria.id("4b2fe28ee2dc9b5f7b000029")

  %br
  <tt>Criteria#limit</tt>: Limits the results to a certain number.
  %pre
    %code
      :preserve
        Person.limit(20)

  %br
  <tt>Criteria#not_in</tt>: Matches when document values are not in the list.
  %pre
    %code
      :preserve
        Person.not_in(:status => ["Divorced", "Single"])

  %br
  <tt>Criteria#only</tt>: Limits the fields returned from the database. Useful for list optimization.
  %pre
    %code
      :preserve
        Person.only(:first_name, :last_name)

  %br
  <tt>Criteria#order_by</tt>: Adds sorting criteria. (Note - always index fields you sort on)
  %pre
    %code
      :preserve
        # chain asc/ascending and desc/descending to the criteria
        Person.desc(:last_name).asc(:first_name)
        Person.descending(:last_name).ascending(:first_name)
  %pre
    %code
      :preserve
        # pass in a list of symbols
        Person.order_by(:last_name.desc, :first_name.asc, :city.desc)
  %pre
    %code
      :preserve
        # you can alternatively pass in an array of arrays
        Person.order_by([[:last_name, :desc], [:first_name, :asc]])

  %br
  <tt>Criteria#skip</tt>: Skips n number of documents, similar to a traditional offset.
  %pre
    %code
      :preserve
        Person.skip(100)

  %br
  <tt>Criteria#near</tt>: Do a geospacial query for a point a certain distance away.
  %pre
    %code
      :preserve
        Address.near(:position => [ 37.7, -122.4, 10 ])

  %br
.title Putting It All Together
.text
  Return only the first and last names for a person with a post code of 94133:
  %pre
    %code
      :preserve
        Person.only(:first_name, :last_name).where("address.post_code" => "94133")

  %br
  Return only the first names for people whos last names are "Vicious" and have a US phone number.
  %pre
    %code
      :preserve
        Person.only(:first_name).where("phones.country_code" => 1).in(:last_name => ["Vicious"])

  %br
  Return all fields for people with last names of "Zorg" and middle initals of "J"
  %pre
    %code
      :preserve
        Person.where(:last_name => "Zorg").and(:middle_initial => "J")

  %br
  Criteria where clause examples using MongoDB expressions:
  %pre
    %code
      :preserve
        Person.where(:title.all => ["Sir"])
        Person.where(:age.exists => true)
        Person.where(:age.gt => 18)
        Person.where(:age.gte => 18)
        Person.where(:title.in => ["Sir", "Madam"])
        Person.where(:age.lt => 55)
        Person.where(:age.lte => 55)
        Person.where(:title.ne => "Mr")
        Person.where(:title.nin => ["Esquire"])
        Person.where(:aliases.size => 2)
        Person.where(:location.near => [ 22.5, -21.33 ])
        Person.where(:location.within => { "$center" => [ [ 50, -40 ], 1 ] })

  %br
.title Chaining Criteria
.text
  Criteria can be chained using class methods on a document, similar to DataMapper. The following
  example will return results for men over age 60:

  %br
  %br
  <tt>person.rb</tt>:
  %pre
    %code
      :preserve
        class Person
          include Mongoid::Document

          field :gender
          field :age

          class &lt;&lt; self
            def men
              criteria.where(:gender => "Male")
            end
            def old
              criteria.where(:age => { "$gt" => 60 })
            end
          end
        end

        Person.old.men # Returns a new criteria of the 2 merged.

%br
.title Arithmetic, Grouping and Aggregation
.text
  Mongoid currently supports some basic arithmetic operations, grouping, and aggregation out of the box.

  %br
  %br
  Find the max value or min value in the database for a single field, returns a float:
  %pre
    %code
      :preserve
        Person.max(:age)
        Person.min(:age)

  %br
  Find the sum of a field across all documents, returns a float:
  %pre
    %code
      :preserve
        Invoice.sum(:total)

  %br
  Get aggregate counts for supplied fields on all documents, this returns an array of hashes with key
  being the field value, and value being the count:
  %pre
    %code
      :preserve
        Person.only(:first_name).where(:age.gt => 18).aggregate

  %br
  Get groups of documents for supplied fields, this returns an array of hashes with key being the field value,
  and value being an array of documents. The entire result set must fit in memory.
  %pre
    %code
      :preserve
        Person.only(:first_name).where(:age.gt => 18).group

  %br
.title Scopes
.text
  Mongoid supports scopes very similar to ActiveRecord 3.0 scopes. A `scope` can provide a hash,
  a proc with a hash, a criteria, or a proc with a criteria. You may also provide an additional
  block to a scope if you want extensions added to it. Scopes can exist on root document classes
  or embedded has many association classes.

  Scopes on association classes cannot be called directly off the class, they must be called on the
  association itself on the parent class instance. These scopes also do not require the association to have
  been persisted. An Example is at the bottom.

  %br
  %br
  Named scopes can be chained together, or can be chained with any class method that returns
  a criteria. The following example describes all cases:

  %br
  %pre
    %code
      :preserve
        class Player
          include Mongoid::Document
          field :active, :type => Boolean
          field :frags, :type => Integer
          field :deaths, :type => Integer
          field :status

          embeds_many :games

          scope :active, where(:active => true) do
            def count
              size
            end
          end
          scope :inactive, :where => { :active => false }
          scope :frags_over, lambda { |count| { :where => { :frags.gt => count } } }
          scope :deaths_under, lambda { |count| where(:deaths.lt => count) }

          class &lt;&lt; self
            def alive
              where(:status => "Alive")
            end
          end
        end

        class Game
          include Mongoid::Document
          field :saved, :type => Boolean, :default => false
          field :level, :type => Integer, :default => 1
          field :studio
          embedded_in :player, :inverse_of => :games

          scope :saved, where(:saved => true)

          class &lt;&lt; self
            def blizzard
              where(:studio => "Blizzard")
            end
          end
        end

        Player.active # Returns active players.
        Player.active.count # Returns the count of active players.
        Player.active.alive # Returns active players that are alive.
        Player.inactive.frags_over(10) # Returns inactive players with over 10 frags.
        Player.deaths_under(30) # Returns players with under 30 deaths.

        player = Player.find(id)
        player.games.saved # Returns the players saved games
        player.games.saved.blizzard # Returns the players saved Blizzard games

